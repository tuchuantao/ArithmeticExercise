package com.kevin.arithmetic.leetcode;

/**
 * Created by tuchuantao on 2021/9/18
 * Desc:
 */
public class Num36 {
  /**
   * 请你判断一个9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
   * 数字1-9在每一行只能出现一次。
   * 数字1-9在每一列只能出现一次。
   * 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）
   * 数独部分空格内已填入了数字，空白格用'.'表示。
   *
   * 注意：
   * 一个有效的数独（部分已被填充）不一定是可解的。
   * 只需要根据以上规则，验证已经填入的数字是否有效即可。
   *
   * 示例 1：
   * 输入：board =
   * [["5","3",".",".","7",".",".",".","."]
   * ,["6",".",".","1","9","5",".",".","."]
   * ,[".","9","8",".",".",".",".","6","."]
   * ,["8",".",".",".","6",".",".",".","3"]
   * ,["4",".",".","8",".","3",".",".","1"]
   * ,["7",".",".",".","2",".",".",".","6"]
   * ,[".","6",".",".",".",".","2","8","."]
   * ,[".",".",".","4","1","9",".",".","5"]
   * ,[".",".",".",".","8",".",".","7","9"]]
   * 输出：true
   *
   * 示例 2：
   * 输入：board =
   * [["8","3",".",".","7",".",".",".","."]
   * ,["6",".",".","1","9","5",".",".","."]
   * ,[".","9","8",".",".",".",".","6","."]
   * ,["8",".",".",".","6",".",".",".","3"]
   * ,["4",".",".","8",".","3",".",".","1"]
   * ,["7",".",".",".","2",".",".",".","6"]
   * ,[".","6",".",".",".",".","2","8","."]
   * ,[".",".",".","4","1","9",".",".","5"]
   * ,[".",".",".",".","8",".",".","7","9"]]
   * 输出：false
   * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
   *
   * 提示：
   * board.length == 9
   * board[i].length == 9
   * board[i][j] 是一位数字或者 '.'
   *
   * 来源：力扣（LeetCode）
   * 链接：https://leetcode-cn.com/problems/valid-sudoku
   * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
   */
  public boolean isValidSudoku(char[][] board) {
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        if (board[i][j] != '.') {
          // 判断行 & 列
          for (int k = 0; k < 9; k++) {
            if (k != j && board[i][j] == board[i][k]) {
              return false;
            }
            if (k != i && board[i][j] == board[k][j]) {
              return false;
            }
          }
          // 判断块
          int row = i / 3 * 3;
          int col = j / 3 * 3;
          for (int k = row; k < row + 3; k++) {
            for (int l = col; l < col + 3; l++) {
              if (k != i && j != l && board[i][j] == board[k][l]) {
                return false;
              }
            }
          }
        }
      }
    }
    return true;
  }

  public boolean isValidSudoku22(char[][] board) {
    int[][] rows = new int[9][9];
    int[][] columns = new int[9][9];
    int[][][] subboxes = new int[3][3][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        char c = board[i][j];
        if (c != '.') {
          int index = c - '0' - 1;
          rows[i][index]++;
          columns[j][index]++;
          subboxes[i / 3][j / 3][index]++;
          if (rows[i][index] > 1 || columns[j][index] > 1 || subboxes[i / 3][j / 3][index] > 1) {
            return false;
          }
        }
      }
    }
    return true;
  }
}
